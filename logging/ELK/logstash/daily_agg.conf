input {
    file {
        path => [
             "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log"
        ]
        start_position => "beginning"
        sincedb_path => "/dev/null"
        tags => ["adhoc"]
    }

    file {
        path => [
             "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log"
        ]
        start_position => "beginning"
        sincedb_path => "/dev/null"
        tags => ["espec"]
    }
}

filter {
    json {
        source => "message"
    }

    if ![timestamp] {
        drop {}
    }

    date {
        match => ["timestamp", "yyyy-MM-dd HH:mm:ss"]
        timezone => "Asia/Singapore"
        target => "@timestamp"
    }

    ruby {
        code => "
            ts_arr = event.get('timestamp').split(' ')
            event_date = ts_arr[0].split('-')
            event.set('start_timestamp',
            LogStash::Timestamp.new(Time.utc(event_date[0].to_i,event_date[1].to_i,event_date[2].to_i,0,0,0)))
            event.set('workday', ts_arr[0])
        "
    }

    if "adhoc" in [tags] and [message] and "succeeded in" in [message] {
         aggregate {
                # aggregation performed daily, flushed out after 24h of first entry
                task_id => "adhoc_success_%{workday}"
                # use event timestamp for timeout
                timeout_timestamp_field => "@timestamp"
                code => "
                    map['@timestamp'] ||= event.get('@timestamp')
                    map['partition'] ||= 'SUCCESS'
                    map['service'] ||= 'ADHOC_SERVICE'
                    map['workday'] ||= event.get('workday')
                    map['triggered_tasks'] ||= 0 ; map['triggered_tasks'] += 1
                "
                timeout => 86400
                push_map_as_event_on_timeout => true
                # replace system timestamp with event timestamp
                timeout_code => "event.set('@timestamp', event.get('@timestamp'))"
         }
    }

    else if "adhoc" in [tags] and [levelname] and [levelname] == "ERROR" {
        aggregate {
              task_id => "adhoc_failure_%{workday}"
              timeout_timestamp_field => "@timestamp"
              code => "
                map['@timestamp'] ||= event.get('@timestamp')
                map['partition'] ||= 'FAILURE'
                map['service'] ||= 'ADHOC_SERVICE'
                map['workday'] ||= event.get('workday')
                map['triggered_tasks'] ||= 0 ; map['triggered_tasks'] += 1
              "
              timeout => 86400
              push_map_as_event_on_timeout => true
              timeout_code => "event.set('@timestamp', event.get('@timestamp'))"
        }
    }
    else if "espec" in [tags] and [message] and "succeeded in" in [message] {
         aggregate {
              task_id => "espec_success_%{workday}"
              timeout_timestamp_field => "@timestamp"
              code => "
                map['@timestamp'] ||= event.get('@timestamp')
                map['partition'] ||= 'SUCCESS'
                map['service'] ||= 'ESPEC_SERVICE'
                map['workday'] ||= event.get('workday')
                map['triggered_tasks'] ||= 0 ; map['triggered_tasks'] += 1
              "
              timeout => 86400
              push_map_as_event_on_timeout => true
              timeout_code => "event.set('@timestamp', event.get('@timestamp'))"
         }
    }

    else if "espec" in [tags] and [levelname] and [levelname] == "ERROR" {
        aggregate {
              task_id => "espec_failure_%{workday}"
              timeout_timestamp_field => "@timestamp"
              code => "
                map['@timestamp'] ||= event.get('@timestamp')
                map['partition'] ||= 'FAILURE'
                map['service'] ||= 'ESPEC_SERVICE'
                map['workday'] ||= event.get('workday')
                map['triggered_tasks'] ||= 0 ; map['triggered_tasks'] += 1
              "
              timeout => 86400
              push_map_as_event_on_timeout => true
              timeout_code => "event.set('@timestamp', event.get('@timestamp'))"
        }
    }
}

output {
    stdout { codec => rubydebug }
    elasticsearch {
        hosts => "https://es01:9200"
        ssl => true
        cacert => "/df_microservices/df_api_gateway/elk/ca.crt"
        user => elastic
        password => elastic123
        manage_template => false
        data_stream => true
    }
}