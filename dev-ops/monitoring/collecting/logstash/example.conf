input {
    file {
        path => [
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.1",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.2",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.3",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.4",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.5",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.6",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.7",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.8",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.9",
            "/df_microservices/df_adhoc_service/src/logs/DF_ADHOC_SERVICE_CELERY_INFO.log.10"
        ]
        start_position => "beginning"
        sincedb_path => "/dev/null"
        tags => ["adhoc_task"]
    }

    file {
        path => [
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.1",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.2",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.3",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.4",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.5",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.6",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.7",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.8",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.9",
            "/df_microservices/df_espec_service/src/logs/DF_ESPEC_SERVICE_CELERY_INFO.log.10"
        ]
        start_position => "beginning"
        sincedb_path => "/dev/null"
        tags => ["espec_task"]
    }
    file {
        path => [
             "/df_microservices/df_email_service/src/logs/*.log"
        ]
        start_position => "beginning"
        sincedb_path => "/dev/null"
        tags => ["email_task"]
    }
}

filter {
    json {
        source => "message"
    }

    if ![timestamp] {
        drop {}
    }

    date {
        match => ["timestamp", "yyyy-MM-dd HH:mm:ss"]
        timezone => "Asia/Singapore"
        target => "@timestamp"
    }

    ruby {
        code => "
            ts_arr = event.get('timestamp').split(' ')
            event_date = ts_arr[0].split('-')
            event.set('start_timestamp',
            LogStash::Timestamp.new(Time.utc(event_date[0].to_i,event_date[1].to_i,event_date[2].to_i,0,0,0)))
            event.set('workday', ts_arr[0])
        "
    }

    if "raised unexpected" in [message] {
        mutate {
            add_field => { "task_status" => "FAILURE" }
            remove_field => [ "exc_info", "module", "levelname", "data" ]
        }
    }

    else if "succeeded in" in [message] {
        grok {
            match => {
                "message" => "succeeded in %{NUMBER:duration}s"
            }
        }
        mutate {
            convert => { "task_duration" => "float" }
            add_field => { "task_status" => "SUCCESS" }
            remove_field => [ "module", "levelname", "message", "data" ]
        }
    }

    mutate {
        remove_field => [ "[event][original]" ]
    }
}

output {
    stdout { codec => rubydebug }
    elasticsearch {
        hosts => "https://es01:9200"
        ssl => true
        cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
        user => elastic
        password => elastic123
        manage_template => false
        data_stream_dataset => "task"
        data_stream_namespace => "tsldf01"
        #data_stream => true
    }
}
